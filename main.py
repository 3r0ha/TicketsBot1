from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.types import Message
from aiogram import executor
from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardButton
import aiosqlite
import pytz
import time
from datetime import datetime, timezone
import asyncio

API_TOKEN = '7070823778:AAH9yYNf99tOtSxYfKAueqvlS_Km9VMI-h0'
OPERATORS = ['989037374']
CHANNEL_NAME = '-1002007209581'

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class Form(StatesGroup):
    waiting_for_question = State()
class QuestionState(StatesGroup):
    waiting_for_question = State()


async def on_startup(dp):
    async with aiosqlite.connect('users.db') as db:
        await db.execute("""
		CREATE TABLE IF NOT EXISTS users (
			id INTEGER PRIMARY KEY,
			username TEXT,
			is_operator BOOLEAN,
			last_action TIMESTAMP
		)
	""")
        await db.execute("""
        CREATE TABLE IF NOT EXISTS tickets (
            id INTEGER PRIMARY KEY AUTOINCREMENT, 
            user_id INTEGER, 
            operator_id INTEGER, 
            status TEXT, 
            question TEXT,
            channel_message_id INTEGER
        )
    """)
        await db.commit()
        for operator_id in OPERATORS:
            await db.execute("INSERT OR IGNORE INTO users (id, is_operator) VALUES (?, ?)",
                             (operator_id, True))
            await db.commit()


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    args = message.get_args()
    if args.startswith('ticket_'):
        ticket_id = args.split('_')[1]
        user_id = message.from_user.id

        async with aiosqlite.connect('users.db') as db:
            cursor = await db.execute("SELECT is_operator FROM users WHERE id = ?", (user_id,))
            is_operator = await cursor.fetchone()

            if is_operator and is_operator[0]:
                confirm_button = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç", callback_data=f"confirm_take_{ticket_id}"))
                await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —Ç–∏–∫–µ—Ç #{ticket_id}?", reply_markup=confirm_button)
            else:
                await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.")

    elif str(message.from_user.id) not in OPERATORS:
        await send_welcome(message)
    else:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥'))
        await message.answer("*–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º\.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–µ–º–∞ —Ç–∏–∫–µ—Ç–æ–≤\.\n\nhttps://t\.me/\+7X4aYo5LQLxmNTYy", reply_markup=markup,parse_mode="MarkdownV2")

async def send_welcome(message: types.Message):
    async with aiosqlite.connect('users.db') as db:
        user_id = message.from_user.id
        cursor = await db.execute("SELECT id FROM users WHERE id = ?", (user_id,))
        user = await cursor.fetchone()

        if not user:
            await db.execute("INSERT INTO users (id, last_action) VALUES (?, '2000-01-01 00:00:00')", (user_id,))
            await db.commit()
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'), KeyboardButton('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'))
    await message.answer("–ü—Ä–∏–≤–µ—Ç\! –≠—Ç–æ \- –±–æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, *–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π\.* –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\.", reply_markup=markup, parse_mode="MarkdownV2")

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('confirm_take'))
async def handle_confirm_take(callback_query: types.CallbackQuery):
    ticket_id = callback_query.data.split('_')[2]
    operator_id = callback_query.from_user.id

    async with aiosqlite.connect('users.db') as db:
        await db.execute("UPDATE tickets SET operator_id = ?, status = '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ' WHERE id = ?", (operator_id, ticket_id))
        await db.commit()

        cursor = await db.execute("SELECT user_id, channel_message_id FROM tickets WHERE id = ?", (ticket_id,))
        user_id, channel_message_id = await cursor.fetchone()

        if user_id:
            await bot.send_message(user_id, "–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–∞–π–¥–µ–Ω –∏ —É–∂–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            if channel_message_id:
                await bot.edit_message_text(chat_id=CHANNEL_NAME, message_id=channel_message_id, text=f"–¢–∏–∫–µ—Ç #{ticket_id} –≤–∑—è—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=None)

            await callback_query.message.edit_text(f"–í—ã –≤–∑—è–ª–∏ —Ç–∏–∫–µ—Ç \#{ticket_id}\. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±—â–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º\.\n\n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É *–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥*", reply_markup=None,parse_mode="MarkdownV2")


@dp.message_handler(lambda message: message.text == "üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
async def show_knowledge_base_categories(message: types.Message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton(text="‚öõÔ∏è –ê—Ç–æ–º—ã", callback_data="category_atoms"),
               types.InlineKeyboardButton(text="üë¶ –ú–æ–ª–µ–∫—É–ª—ã", callback_data="category_molecules"),
               types.InlineKeyboardButton(text="üêú –ú—É—Ä–∞–≤—å–∏", callback_data="category_ants"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

user_last_choice = {}
@dp.callback_query_handler(lambda c: c.data.startswith('category_'))
async def show_subcategories(callback_query: types.CallbackQuery):
    action = callback_query.data.split('_')[1]
    user_last_choice[callback_query.from_user.id] = callback_query.data
    markup = types.InlineKeyboardMarkup(row_width=1)

    if action == "atoms":
        markup.add(types.InlineKeyboardButton(text="–ü—Ä–æ—Ç–æ–Ω—ã", callback_data="atoms_protons"),
                   types.InlineKeyboardButton(text="–≠–ª–µ–∫—Ç—Ä–æ–Ω—ã", callback_data="atoms_electrons"),
                   types.InlineKeyboardButton(text="–ù–µ–π—Ç—Ä–æ–Ω—ã", callback_data="atoms_neutrons"))
        text = "‚öõÔ∏è –ê—Ç–æ–º—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É"

    elif action == "molecules":
        markup.add(types.InlineKeyboardButton(text="–í–æ–¥–∞ H2O", callback_data="molecules_water"),
                   types.InlineKeyboardButton(text="–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑ CO2", callback_data="molecules_co2"),
                   types.InlineKeyboardButton(text="–û–∑–æ–Ω O3", callback_data="molecules_o3"))
        text = "üë¶ –ú–æ–ª–µ–∫—É–ª—ã: –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É"

    elif action == "ants":
        markup.add(types.InlineKeyboardButton(text="–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ –º—É—Ä–∞–≤—å–µ–≤", callback_data="ants_lifestyle"),
                   types.InlineKeyboardButton(text="–ü–∏—Ç–∞–Ω–∏–µ –º—É—Ä–∞–≤—å–µ–≤", callback_data="ants_food"),
                   types.InlineKeyboardButton(text="–ú—É—Ä–∞–≤—å–∏ –∏ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞", callback_data="ants_ecosystem"))
        text = "üêú –ú—É—Ä–∞–≤—å–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É"
    markup.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data ="go_back_to_categories"))


    await bot.edit_message_text(text=text, chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data == 'go_back_to_categories')
async def go_back_to_categories(callback_query: types.CallbackQuery):
    await show_knowledge_base_categories(callback_query.message)
    await callback_query.message.delete()

@dp.callback_query_handler(lambda c: c.data.startswith('atoms_') or
                                     c.data.startswith('molecules_') or
                                     c.data.startswith('ants_'))
async def show_information(callback_query: types.CallbackQuery):
    data = callback_query.data
    info = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."

    if data == "atoms_protons":
        info = "–ü—Ä–æ—Ç–æ–Ω ‚Äì —ç—Ç–æ —Å—É–±–∞—Ç–æ–º–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞, –∏–º–µ—é—â–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∑–∞—Ä—è–¥."
    elif data == "atoms_electrons":
        info = "–≠–ª–µ–∫—Ç—Ä–æ–Ω ‚Äì —ç—Ç–æ —Å—É–±–∞—Ç–æ–º–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞, –∏–º–µ—é—â–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∑–∞—Ä—è–¥."
    elif data == "atoms_neutrons":
        info = "–ù–µ–π—Ç—Ä–æ–Ω ‚Äì —ç—Ç–æ —Å—É–±–∞—Ç–æ–º–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞ –±–µ–∑ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ä—è–¥–∞."

    elif data == "molecules_water":
        info = "–í–æ–¥–∞ (H2O) ‚Äì —ç—Ç–æ –º–æ–ª–µ–∫—É–ª–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –¥–≤—É—Ö –∞—Ç–æ–º–æ–≤ –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –æ–¥–Ω–æ–≥–æ –∞—Ç–æ–º–∞ –∫–∏—Å–ª–æ—Ä–æ–¥–∞."
    elif data == "molecules_co2":
        info = "–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑ (CO2) ‚Äì —ç—Ç–æ –º–æ–ª–µ–∫—É–ª–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –æ–¥–Ω–æ–≥–æ –∞—Ç–æ–º–∞ —É–≥–ª–µ—Ä–æ–¥–∞ –∏ –¥–≤—É—Ö –∞—Ç–æ–º–æ–≤ –∫–∏—Å–ª–æ—Ä–æ–¥–∞."
    elif data == "molecules_o3":
        info = "–û–∑–æ–Ω (O3) ‚Äì —ç—Ç–æ –º–æ–ª–µ–∫—É–ª–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ç—Ä–µ—Ö –∞—Ç–æ–º–æ–≤ –∫–∏—Å–ª–æ—Ä–æ–¥–∞, –∏–≥—Ä–∞–µ—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ –∑–∞—â–∏—Ç–µ –ó–µ–º–ª–∏ –æ—Ç —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è."

    elif data == "ants_lifestyle":
        info = "–ú—É—Ä–∞–≤—å–∏ ‚Äì —ç—Ç–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å–µ–∫–æ–º—ã–µ, –∂–∏–≤—É—â–∏–µ –∫–æ–ª–æ–Ω–∏—è–º–∏. –ï—Å—Ç—å —Ä–∞–±–æ—á–∏–µ –º—É—Ä–∞–≤—å–∏, —Å–æ–ª–¥–∞—Ç—ã, –∏ –∫–æ—Ä–æ–ª–µ–≤–∞."
    elif data == "ants_food":
        info = "–ú—É—Ä–∞–≤—å–∏ –º–æ–≥—É—Ç –ø–∏—Ç–∞—Ç—å—Å—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–π –ø–∏—â–µ–π, –¥—Ä—É–≥–∏–º–∏ –Ω–∞—Å–µ–∫–æ–º—ã–º–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥—Å–ª–∞—Å—Ç–∏—Ç–µ–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –Ω–∞—Å–µ–∫–æ–º—ã–º–∏."
    elif data == "ants_ecosystem":
        info = "–ú—É—Ä–∞–≤—å–∏ –∏–≥—Ä–∞—é—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞—Ö –∫–∞–∫ —Ä–∞–∑–ª–∞–≥–∞—Ç–µ–ª–∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞, –æ–ø—ã–ª–∏—Ç–µ–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –∫–∞–∫ –ø–∏—â–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö."

    await bot.edit_message_text(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id,
                                text=info,
                                reply_markup=types.InlineKeyboardMarkup())

@dp.message_handler(user_id=OPERATORS)
async def forward_to_user(message: types.Message):
    if message.text.startswith('–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥'):
        await cmd_stop(message)
    else:
        operator_id = message.from_user.id

        async with aiosqlite.connect('users.db') as db:
            cursor = await db.execute("SELECT id, user_id FROM tickets WHERE operator_id = ? AND status = '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'", (operator_id,))
            ticket_info = await cursor.fetchone()

            if ticket_info:
                _, user_id = ticket_info
                await bot.send_message(user_id, message.text)
            else:
                await message.reply("–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")

@dp.message_handler(lambda message: message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message):
    await QuestionState.waiting_for_question.set()
    markup = ReplyKeyboardMarkup(resize_keyboard=True, selective=True).add("‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å")
    await message.reply("–ü—Ä–µ–∂–¥–µ —á–µ–º –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ –≤ –Ω–∞—à–µ–π *–ë–∞–∑–µ –∑–Ω–∞–Ω–∏–π*\. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–µ–π, –Ω–∞–∂–º–∏—Ç–µ *‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å*\.\n\n –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Ç–∞–º –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ –∑–¥–µ—Å—å:", reply_markup=markup, parse_mode="MarkdownV2")


@dp.message_handler(Text(equals='‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.finish()
    user_id = message.from_user.id

    async with aiosqlite.connect('users.db') as db:
        cursor = await db.execute("""
            SELECT id, operator_id, channel_message_id FROM tickets
            WHERE user_id = ? AND status != '–∑–∞–∫—Ä—ã—Ç'
            ORDER BY id DESC LIMIT 1
        """, (user_id,))
        ticket_info = await cursor.fetchone()
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'), KeyboardButton('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'))
        if ticket_info:
            ticket_id, operator_id, channel_message_id = ticket_info

            if operator_id:
                await bot.send_message(operator_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç \#{ticket_id}\. *–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω\.*",parse_mode="MarkdownV2")

            await db.execute("UPDATE tickets SET status = '–∑–∞–∫—Ä—ã—Ç' WHERE id = ?", (ticket_id,))
            await db.commit()

            if channel_message_id:
                await bot.edit_message_text(chat_id=CHANNEL_NAME, message_id=channel_message_id,
                                            text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç #{ticket_id}")
            markup = ReplyKeyboardMarkup(resize_keyboard=True)
            markup.add(KeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'), KeyboardButton('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'))
            await message.answer("–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.",reply_markup=markup)
        else:
            await message.answer("–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.",reply_markup=markup)


knowledge_base = [
    {"keywords": ["–ø—Ä–æ—Ç–æ–Ω", "–∑–∞—Ä—è–¥", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–ø—Ä–æ—Ç–æ–Ω–æ–º", "–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π","–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º", "–∑–∞—Ä—è–¥–∞", "–∑–∞—Ä—è–¥–æ–º", "–∑–∞—Ä—è–¥–∞–º–∏","–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏"],
     "answer": "–ü—Ä–æ—Ç–æ–Ω ‚Äì —ç—Ç–æ —Å—É–±–∞—Ç–æ–º–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞, –∏–º–µ—é—â–∞—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∑–∞—Ä—è–¥."},
    {"keywords": ["—ç–ª–µ–∫—Ç—Ä–æ–Ω", "–∑–∞—Ä—è–¥", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–ø—Ä–æ—Ç–æ–Ω–æ–º", "–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π","–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º", "–∑–∞—Ä—è–¥–∞", "–∑–∞—Ä—è–¥–æ–º", "–∑–∞—Ä—è–¥–∞–º–∏","–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏"],
     "answer": "–≠–ª–µ–∫—Ç—Ä–æ–Ω ‚Äì —ç—Ç–æ —Å—É–±–∞—Ç–æ–º–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞, –∏–º–µ—é—â–∞—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –∑–∞—Ä—è–¥."},
    {"keywords": ["–Ω–µ–π—Ç—Ä–æ–Ω", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–∑–∞—Ä—è–¥", "–Ω–µ–π—Ç—Ä–æ–Ω–∞", "–Ω–µ–π—Ç—Ä–æ–Ω–∞–º–∏", "–Ω–µ–π—Ç—Ä–æ–Ω–æ–º", "–∑–∞—Ä—è–¥–∞", "–∑–∞—Ä—è–¥–æ–º", "–∑–∞—Ä—è–¥–∞–º–∏"],
     "answer": "–ù–µ–π—Ç—Ä–æ–Ω ‚Äì —ç—Ç–æ —Å—É–±–∞—Ç–æ–º–Ω–∞—è —á–∞—Å—Ç–∏—Ü–∞ –±–µ–∑ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–≥–æ –∑–∞—Ä—è–¥–∞."},

    {"keywords": ["–≤–æ–¥–∞", "h2o", "–º–æ–ª–µ–∫—É–ª–∞", "–≤–æ–¥—ã", "–º–æ–ª–µ–∫—É–ª—ã", "–≤–æ–¥–æ–π"],
     "answer": "–í–æ–¥–∞ (H2O) ‚Äì —ç—Ç–æ –º–æ–ª–µ–∫—É–ª–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –¥–≤—É—Ö –∞—Ç–æ–º–æ–≤ –≤–æ–¥–æ—Ä–æ–¥–∞ –∏ –æ–¥–Ω–æ–≥–æ –∞—Ç–æ–º–∞ –∫–∏—Å–ª–æ—Ä–æ–¥–∞."},
    {"keywords": ["—É–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑", "co2", "–º–æ–ª–µ–∫—É–ª–∞", "–º–æ–ª–µ–∫—É–ª—ã", "—É–≥–ª–µ–∫–∏—Å–ª—ã–π", "—É–≥–ª–µ–∫–∏—Å–ª–æ–≥–æ", "—É–≥–ª–µ–∫–∏—Å–ª—ã–º", "–≥–∞–∑", "–≥–∞–∑–æ–º", "–≥–∞–∑–∞–º–∏", "–≥–∞–∑–∞", "—Å–µ–∫—Ç–æ—Ä –≥–∞–∑–∞", "–ø–∞–ª–µ—Å—Ç–∏–Ω–∞"],
     "answer": "–£–≥–ª–µ–∫–∏—Å–ª—ã–π –≥–∞–∑ (CO2) ‚Äì —ç—Ç–æ –º–æ–ª–µ–∫—É–ª–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ –æ–¥–Ω–æ–≥–æ –∞—Ç–æ–º–∞ —É–≥–ª–µ—Ä–æ–¥–∞ –∏ –¥–≤—É—Ö –∞—Ç–æ–º–æ–≤ –∫–∏—Å–ª–æ—Ä–æ–¥–∞."},
    {"keywords": ["–æ–∑–æ–Ω", "o3", "–º–æ–ª–µ–∫—É–ª–∞", "–æ3", "–º–æ–ª–µ–∫—É–ª—ã", "–æ–∑–æ–Ω–æ–≤—ã–π", "–æ–∑–æ–Ω–∞", "–æ–∑–æ–Ω–æ–º", "—Ä–æ–ª—å", "—É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç", "—É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ", "—É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π"],
     "answer": "–û–∑–æ–Ω (O3) ‚Äì —ç—Ç–æ –º–æ–ª–µ–∫—É–ª–∞, —Å–æ—Å—Ç–æ—è—â–∞—è –∏–∑ —Ç—Ä–µ—Ö –∞—Ç–æ–º–æ–≤ –∫–∏—Å–ª–æ—Ä–æ–¥–∞, –∏–≥—Ä–∞–µ—Ç –≤–∞–∂–Ω—É—é —Ä–æ–ª—å –≤ –∑–∞—â–∏—Ç–µ –ó–µ–º–ª–∏ –æ—Ç —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏—è."},

    {"keywords": ["–º—É—Ä–∞–≤—å–∏", "–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", "–æ–±—Ä–∞–∑", "–∂–∏–∑–Ω–∏", "–º—É—Ä–∞–≤–µ–π", "–º—É—Ä–∞–≤—å—è"],
     "answer": "–ú—É—Ä–∞–≤—å–∏ ‚Äì —ç—Ç–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞—Å–µ–∫–æ–º—ã–µ, –∂–∏–≤—É—â–∏–µ –∫–æ–ª–æ–Ω–∏—è–º–∏. –ï—Å—Ç—å —Ä–∞–±–æ—á–∏–µ –º—É—Ä–∞–≤—å–∏, —Å–æ–ª–¥–∞—Ç—ã, –∏ –∫–æ—Ä–æ–ª–µ–≤–∞."},
    {"keywords": ["–ø–∏—Ç–∞–Ω–∏–µ", "–º—É—Ä–∞–≤—å–∏", "–º—É—Ä–∞–≤–µ–π", "–º—É—Ä–∞–≤—å—è", "–ø–∏—Ç–∞–µ—Ç—Å—è", "–µ—Å—Ç", "–∂—Ä–µ—Ç", "—É–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç", "–ø–æ—Ç—Ä–µ–±–ª—è–µ—Ç"],
     "answer": "–ú—É—Ä–∞–≤—å–∏ –º–æ–≥—É—Ç –ø–∏—Ç–∞—Ç—å—Å—è —Ä–∞—Å—Ç–∏—Ç–µ–ª—å–Ω–æ–π –ø–∏—â–µ–π, –¥—Ä—É–≥–∏–º–∏ –Ω–∞—Å–µ–∫–æ–º—ã–º–∏, –∞ —Ç–∞–∫–∂–µ –ø–æ–¥—Å–ª–∞—Å—Ç–∏—Ç–µ–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ –∏ –Ω–∞—Å–µ–∫–æ–º—ã–º–∏."},
    {"keywords": ["–º—É—Ä–∞–≤—å–∏", "—ç–∫–æ—Å–∏—Å—Ç–µ–º–∞", "–º—É—Ä–∞–≤–µ–π", "–º—É—Ä–∞–≤—å—è", "—Å–∏—Å—Ç–µ–º–∞", "—ç–∫–æ", "—Ä–æ–ª—å", "–∑–∞—á–µ–º"],
     "answer": "–ú—É—Ä–∞–≤—å–∏ –∏–≥—Ä–∞—é—Ç –∫–ª—é—á–µ–≤—É—é —Ä–æ–ª—å –≤ —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞—Ö –∫–∞–∫ —Ä–∞–∑–ª–∞–≥–∞—Ç–µ–ª–∏ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ –≤–µ—â–µ—Å—Ç–≤–∞, –æ–ø—ã–ª–∏—Ç–µ–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –∫–∞–∫ –ø–∏—â–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö –≤–∏–¥–æ–≤ –∂–∏–≤–æ—Ç–Ω—ã—Ö."},
]

def search_knowledge(query):
    query_words = set(query.lower().split())
    results = []

    for item in knowledge_base:
        if query_words & set(item["keywords"]):
            results.append(item["answer"])

    return results

@dp.callback_query_handler(lambda c: c.data and c.data == 'yes_call')
async def yes_call(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    inline_kb = InlineKeyboardMarkup().add(InlineKeyboardButton('–î–∞, –ø–æ–∑–æ–≤–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', callback_data='handle_operator'))
    await bot.send_message(user_id,"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ *–Ω–µ—Ç –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π* –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ç–æ—Ä?\n–ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ *‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤–æ–ø—Ä–æ—Å* –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–π –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\.", reply_markup=inline_kb, parse_mode="MarkdownV2")

@dp.callback_query_handler(lambda c: c.data and c.data == 'handle_operator')
async def handle_operator_callback(callback_query: types.CallbackQuery):

    await bot.answer_callback_query(callback_query.id)
    user_id = callback_query.from_user.id
    username = callback_query.from_user.username
    question_text = user_questions.get(user_id, "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞")
    if not await check_user_timeout(user_id):
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'), KeyboardButton('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'))
        await bot.send_message(user_id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.",reply_markup=markup)
        return
    else:
        await bot.send_message(user_id, "*–ò—â–µ–º –≤–∞–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\.\.\.* –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\.", parse_mode="MarkdownV2")
        async with aiosqlite.connect('users.db') as db:
            cursor = await db.execute("INSERT INTO tickets (user_id, status, question) VALUES (?, ?, ?)",
                                      (user_id, "–æ—Ç–∫—Ä—ã—Ç", question_text))
            ticket_id = cursor.lastrowid
            await db.commit()

        ticket_link = f"https://t.me/antihypesupportbot?start=ticket_{ticket_id}"
        call_operator_btn = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç", url=ticket_link))

        sent_message = await bot.send_message(CHANNEL_NAME,f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} ({user_id}) —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç #{ticket_id}:\n\n{question_text}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∑—è—Ç—å —Ç–∏–∫–µ—Ç.",reply_markup=call_operator_btn)
        async with aiosqlite.connect('users.db') as db:
            await db.execute("UPDATE tickets SET channel_message_id = ? WHERE id = ?", (sent_message.message_id, ticket_id))
            await db.commit()
        await update_user_last_action(user_id)



user_questions = dict()
@dp.message_handler(state=QuestionState.waiting_for_question)
async def process_question(message: types.Message, state: FSMContext):
    await state.finish()
    await state.update_data(question_text=message.text)
    user_id = message.from_user.id
    username = message.from_user.username
    question_text = message.text
    user_questions[user_id] = question_text
    inline_kb = InlineKeyboardMarkup().add(InlineKeyboardButton('üßë‚Äçüíª –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É', callback_data='yes_call'))
    results = search_knowledge(message.text.lower())

    if results:
        answers = "\n\n".join(results)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await message.answer(f"–í–æ—Ç —á—Ç–æ –±–æ—Ç –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É:\n\n{answers}\n\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",reply_markup=inline_kb)
    else:
        await message.answer("ü§ï –£–ø—Å, –Ω–µ –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É\. –í–æ–∑–º–æ–∂–Ω–æ, *–æ–Ω–∞ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π\.* –ù–∞–∂–º–∏—Ç–µ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –µ–µ —Ç–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ—Ç\.",reply_markup=inline_kb,parse_mode="MarkdownV2")
        await state.finish()

@dp.message_handler(lambda message: message.text.lower() == "–æ–ø–µ—Ä–∞—Ç–æ—Ä" or message.text.lower() == "–æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É" or message.text.lower() == "–∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫")
async def handle_operator_request(message: types.Message):

    await message.answer("*–ò—â–µ–º –≤–∞–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞\.\.\.* –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞\.", parse_mode="MarkdownV2")
    async with aiosqlite.connect('users.db') as db:
        cursor = await db.execute("INSERT INTO tickets (user_id, status, question) VALUES (?, ?, ?)",
                                  (message.from_user.id, "–æ—Ç–∫—Ä—ã—Ç", message.text))
        ticket_id = cursor.lastrowid
        await db.commit()

    ticket_link = f"https://t.me/antihypesupportbot?start=ticket_{ticket_id}"
    call_operator_btn = InlineKeyboardMarkup().add(InlineKeyboardButton("–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç", url=ticket_link))

    sent_message = await bot.send_message(CHANNEL_NAME,
                                          f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} ({message.from_user.id}) —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç #{ticket_id}:\n\n{message.text}\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–∑—è—Ç—å —Ç–∏–∫–µ—Ç.",
                                          reply_markup=call_operator_btn)

    async with aiosqlite.connect('users.db') as db:
        await db.execute("UPDATE tickets SET channel_message_id = ? WHERE id = ?", (sent_message.message_id, ticket_id))
        await db.commit()



@dp.callback_query_handler(lambda c: c.data and c.data.startswith('take_ticket'))
async def handle_ticket_take(callback_query: types.CallbackQuery):
    user_id = str(callback_query.from_user.id)
    if user_id in OPERATORS:
        async with aiosqlite.connect('users.db') as db:
            cursor = await db.execute("SELECT id FROM tickets WHERE status = '–æ—Ç–∫—Ä—ã—Ç' ORDER BY id DESC LIMIT 1")
            ticket = await cursor.fetchone()

            if ticket:
                ticket_id = ticket[0]
                await db.execute("UPDATE tickets SET operator_id = ?, status = '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ' WHERE id = ?",
                                 (user_id, ticket_id))
                await db.commit()

                await bot.answer_callback_query(callback_query.id, f"–í—ã –≤–∑—è–ª–∏ —Ç–∏–∫–µ—Ç #{ticket_id}.")

                await bot.edit_message_text(chat_id=CHANNEL_NAME, message_id=callback_query.message.message_id,
                                            text=f"–¢–∏–∫–µ—Ç #{ticket_id} –≤–∑—è—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.",
                                            reply_markup=None)
            else:
                await bot.answer_callback_query(callback_query.id, "–°–≤–æ–±–æ–¥–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–µ—Ç.", show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.", show_alert=True)


@dp.message_handler(Text(equals='–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', ignore_case=True), state='*')
async def cmd_stop(message: Message):
    operator_id = message.from_user.id
    if str(operator_id) in OPERATORS:
        async with aiosqlite.connect('users.db') as db:
            cursor = await db.execute("""
                SELECT id, user_id, channel_message_id FROM tickets
                WHERE operator_id = ? AND status = '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'
            """, (operator_id,))
            ticket_info = await cursor.fetchone()

            if ticket_info:
                ticket_id, user_id, channel_message_id = ticket_info

                await db.execute("UPDATE tickets SET status = '–∑–∞–∫—Ä—ã—Ç' WHERE id = ?", (ticket_id,))
                await db.commit()

                markup = ReplyKeyboardMarkup(resize_keyboard=True)
                markup.add(KeyboardButton('‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'), KeyboardButton('üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π'))
                await bot.send_message(user_id, "*–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥\.* –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å —Å–Ω–æ–≤–∞\.",reply_markup=markup, parse_mode="MarkdownV2")
                if channel_message_id:
                    await bot.edit_message_text(chat_id=CHANNEL_NAME, message_id=channel_message_id,
                                                text=f"–û–ø–µ—Ä–∞—Ç–æ—Ä –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç #{ticket_id}")
                await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–∏–∞–ª–æ–≥.")
            else:
                await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤.")
    else:
        await message.reply("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")


@dp.message_handler(lambda message: message.chat.type == 'private')
async def forward_to_operator(message: types.Message):
    user_id = message.from_user.id

    async with aiosqlite.connect('users.db') as db:
        cursor = await db.execute(
            "SELECT operator_id FROM tickets WHERE user_id = ? AND status = '–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ' LIMIT 1", (user_id,))
        operator_info = await cursor.fetchone()

        if operator_info:
            operator_id = operator_info[0]
            await bot.send_message(operator_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.text}")
        else:
            await message.reply(
                "–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç –Ω–∏ –æ–¥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–≤—è–∑–∞–Ω —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º\. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å*, –µ—Å–ª–∏ –≤—ã —ç—Ç–æ–≥–æ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏", parse_mode="MarkdownV2")

async def update_user_last_action(user_id: int):
    async with aiosqlite.connect('users.db') as db:
        await db.execute("UPDATE users SET last_action = CURRENT_TIMESTAMP WHERE id = ?", (user_id,))
        await db.commit()

async def check_user_timeout(user_id: int) -> bool:
    async with aiosqlite.connect('users.db') as db:
        cursor = await db.execute("SELECT last_action FROM users WHERE id = ?", (user_id,))
        last_action_row = await cursor.fetchone()
        if last_action_row is None:
            return True
        last_action = last_action_row[0]
        if last_action:
            last_action_time = datetime.strptime(last_action, '%Y-%m-%d %H:%M:%S').replace(tzinfo=timezone.utc)
            current_time = datetime.now(timezone.utc)
            if (current_time - last_action_time).total_seconds() < 60:
                return False
        return True

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup(dp))
    executor.start_polling(dp, skip_updates=True)
